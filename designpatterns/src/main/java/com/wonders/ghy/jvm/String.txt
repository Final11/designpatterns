package java.lang;

/**
 * 双亲委派机制：类装载器（应用程序类加载器）会加载这个类。由于双亲委派机制先从bootstrap加载器找
 * 然后找到了java.lang.String。那么类装载器加载的就会被废弃
 * 沙箱安全机制：这样就保证了java原类不会被污染
 */
public class String {
    public static void main(String[] args) {
        System.out.println("hello java0222_sh");
    }
}
/**
 * 当一个类收到了类加载请求，他首先不会尝试自己去加载这个类，而是把这个
 * 请求委派给父类去完成，每一个层次类加载器都是如此，因此所有的加载请求.
 * 都应该传送到启动类加载器中，只有当父类加载器反馈自己无法完成这个请求.
 * 的时候(在它的加载路径下没有找到所需加载的Class)，子类加载器才会尝试
 * 自己去加载。
 * 采用双亲委派的一个好处是比如加载位于rt.jar包中的类java.lang.Object， 不管
 * 是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这
 * 样就保证了使用不同的类加载器最终得到的都是同样一个Object对象。
 */
